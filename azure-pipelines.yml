# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- development

pool:
  vmImage: 'ubuntu-latest'

steps:

- script: newman --version
  displayName: Verify newman version

- script: dotnet tool update fake-cli
  displayName: Install Fake
  
- task: NuGetToolInstaller@1
- script: echo "$(ENV_FILE)"

- task: DockerInstaller@0
  inputs:
    dockerVersion: '17.09.0-ce'

- task: KubectlInstaller@0
  inputs:
    kubectlVersion: 'latest'

# Download Minikube and it's prerequisites
- script: sudo apt-get install conntrack && set -e && export CHANGE_MINIKUBE_NONE_USER=true && sudo mount --make-rshared /
  displayName: Minikube prerequisites  

- script: curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
  displayName: Downloading Minikube

- script: docker login -u="$DOCKER_USER" -p="$DOCKER_PASS"
  displayName: Docker login

#- script: docker login https://docker.pkg.github.com -u="$GIT_USER" -p="$GIT_PASS"
- script: docker pull gcr.io/k8s-minikube/kicbase:v0.0.11
  displayName: Pull minikube image

# Start Minikube
- script: minikube start --driver docker --base-image gcr.io/k8s-minikube/kicbase:v0.0.11
  displayName: Start Minikube

# Fix permissions issue in AzurePipelines
- script: sudo chmod --recursive 777 $HOME/.minikube && sudo chmod --recursive 777 $HOME/.kube && minikube update-context
  displayName: Fix permissions

# Set up cluster
- script: echo "$(ENV_FILE)" | kubectl apply -f -
  displayName: Apply kubernetes environment file
  
- script: source functions.sh && build BuildForTest 8 && docker images
  displayName: Build the world

- script: |
    source functions.sh
    start
    sleep 3
    printf "${Purple}Publishing transformations and configurations\n"
    publish
    logs gateway
    NAME="pod/$(getName publish)"
    kubectl wait --for=condition=ready ${NAME} --timeout=30s >> /dev/null
    printf "${Purple}Publishing\n"
    kubectl logs ${NAME} -f &
    kubectl wait --for=condition=complete job.batch/publish --timeout=60s
    printf "${Purple}Published${NoColor}\n" 
    printf "${Cyan}Sync\n"
    kubectl port-forward service/db-svc 5984:5984 &
    CONFIG_COUNT=$(curl --silent http://admin:password@127.0.0.1:5984/configurations/_all_docs | grep "key" | wc -l)
    if [ $CONFIG_COUNT -eq 0 ]
    then
        printf "${Red}Something went wrong with configs\n"
        curl http://admin:password@127.0.0.1:5984/uniformcache/_all_docs
        curl http://admin:password@127.0.0.1:5984/configurations/_all_docs
        printf "${Purple}"
        kubectl logs job/publish
        printfn "${Cyan}"
        kubectl logs service/gateway-svc        
        printf "${Red}Can't sync${NoColor}\n"
    else
        sync
    fi
    printf "${Cyan}Syncing${NoColor}\n"
    NAME="pod/$(getName sync)"
    kubectl wait --for=condition=ready ${NAME} --timeout=30s >> /dev/null
    kubectl logs ${NAME} -f &
    kubectl wait --for=condition=complete job.batch/sync --timeout=60s
  displayName: Setup tests

- script: |
    DB_PORT=35984
    kubectl port-forward service/gateway-svc 30080:80 &
    kubectl port-forward service/db-svc ${DB_PORT}:5984 &
    sleep 120
    source functions.sh
    printf "${Cyan}**************Git********************\n"
    logs git
    printf "${Cyan}**************Git********************\n"
    printf "${Purple}**************Uniform********************\n"
    logs uniform
    printf "${Purple}**************Uniform********************\n"
    
    DB_USER="admin:password"
    DB_SERVER="http://127.0.0.1:${DB_PORT}"
    curl -u "${DB_USER}" "${DB_SERVER}/configurations/_all_docs"
    curl -u "${DB_USER}" "${DB_SERVER}/uniformcache/_all_docs"
    printf "${NoColor}"
    newman run https://api.getpostman.com/collections/7af4d823-d527-4bc8-88b0-d732c6243959?apikey=$(PM_APIKEY) -e https://api.getpostman.com/environments/b0dfd968-9fc7-406b-b5a4-11bae0ed4b47?apikey=$(PM_APIKEY) --env-var "ip"=$(minikube ip) --env-var "master_key"=$(MASTER_KEY)
  displayName: Run postman tests

- script: |
    docker push kmdrd/workbench
    git config --global credential.helper store
    git config --global user.email "hobbes_buildserver@kmd.dk"
    git config --global user.name "Build server"
    echo "azure-pipelines.yml merge=ours" > .gitattributes
    git config --global merge.ours.driver true
    git remote add pseudo https://$(GIT_ACCESS_TOKEN):x-oauth-basic@github.com/r-d-kmd/hobbes.git
    git checkout master
    git merge origin/development
    git push pseudo master
  displayName: Push to master
