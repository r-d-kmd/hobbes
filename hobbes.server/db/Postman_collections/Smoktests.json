{
	"info": {
		"_postman_id": "6e0435ba-3e78-4ecd-b02e-44278e49f308",
		"name": "Smoktests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Test ping",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2fb7e3b0-23b2-4249-9f4e-f666165e1c7d",
						"exec": [
							"pm.test(\"Ping responded\", function() {",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.json()).to.be.an('Object');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{pat}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{front}}/api/ping",
					"host": [
						"{{front}}"
					],
					"path": [
						"api",
						"ping"
					]
				}
			},
			"response": []
		},
		
		{
			"name": "Test csv",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4303c9a8-aa49-4f91-939f-c8fe3c6738cd",
						"exec": [
							"pm.test(\"Status code ok\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"reponse is non-empty text\", function() {",
							"    pm.expect(pm.response.text()).to.be.an('string');",
							"    pm.expect(pm.response.text().length).to.be.above(0);",
							"});",
							"",
							"function createRequest(url, method, rev) {",
							"    var header;",
							"    if(rev) {",
							"        header = {",
							"                'Authorization': 'Basic ' + environment.userPass64,",
							"                'If-Match': rev",
							"            };",
							"            ",
							"    } else {header = 'Authorization: Basic  ' + environment.userPass64}",
							"   ",
							"    return {",
							"             url: environment.dburl + url,",
							"             method: method,",
							"             header: header",
							"    };",
							"}",
							"",
							"function requestDelete_(url, tries) {",
							"    pm.sendRequest(createRequest(url, 'GET'), function(err, res) {",
							"        if(err) {",
							"            console.log(err);",
							"        } else {",
							"            pm.sendRequest(createRequest(url, 'DELETE', res.json()._rev), function(err, res) {",
							"                if(err) {",
							"                    requestDelete(url);",
							"                } else {",
							"                    if (res.code != 200 && tries < 10) requestDelete_(url, ++tries);",
							"                }",
							"            });",
							"        }",
							"    });",
							"}",
							"",
							"function requestDelete(url) {",
							"    requestDelete_(url, 0);",
							"}",
							"",
							"requestDelete('configurations/test');",
							"requestDelete('transformations/test');",
							"requestDelete('rawdata/test');",
							"requestDelete('cache/azure devops:testset:test');",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "8675ab9d-19d8-48cf-9917-7a86bdad704a",
						"exec": [
							"function sendRequest(url, body) {",
							"    request =  ",
							"        {",
							"            url: environment.dburl + url,",
							"            method: 'POST',",
							"            header: {",
							"                'Authorization': 'Basic  ' + environment.userPass64,",
							"                'content-type': 'application/json'",
							"            },",
							"            body: {",
							"                mode: 'raw',",
							"                raw: JSON.stringify(body)",
							"            }",
							"       };",
							"               ",
							"   pm.sendRequest(request, function(err, res) {});",
							"}",
							"",
							"var conf = ",
							"    {",
							"        \"_id\" : \"test\",",
							"        \"source\" : \"azure devops\",",
							"        \"dataset\" : \"testset\",",
							"        \"transformations\" : [\"test\"]",
							"    };",
							"    ",
							"var trans =",
							"    {",
							"        \"_id\": \"test\",",
							"        \"lines\": [\"only 1 = 1\"]",
							"    };",
							"    ",
							"var data =",
							"    {",
							"        \"_id\": \"test\",",
							"        \"project\": \"testset\",",
							"        \"source\": \"azure devops\",",
							"        \"timestamp\": \"01/01/1970\",",
							"        \"Url\": \"fake-url\",",
							"        \"data\": ",
							"        {",
							"            \"@odata.context\": \"https://www.test.test2\",",
							"            \"value\": [",
							"              {",
							"                \"ChangedDate\": \"2019-02-20T14:21:41.137+01:00\",",
							"                \"WorkItemId\": 78566,",
							"                \"WorkItemRevisionSK\": 89722988,",
							"                \"WorkItemType\": \"Task\",",
							"                \"State\": \"New\",",
							"                \"StateCategory\": \"Proposed\",",
							"                \"Iteration\": {",
							"                  \"ProjectSK\": \"7c0a8e77-f740-44a3-96a7-7d7ff665caaf\",",
							"                  \"IterationSK\": \"857658df-406e-43e5-bb1b-382d229f2dea\",",
							"                  \"IterationId\": \"857658df-406e-43e5-bb1b-382d229f2dea\",",
							"                  \"IterationName\": \"Iteration 1\",",
							"                  \"Number\": 2565,",
							"                  \"IterationPath\": \"flowerpot\\\\Iteration 1\",",
							"                  \"StartDate\": \"2019-02-13T00:00:00+01:00\",",
							"                  \"EndDate\": \"2019-02-27T23:59:59.999+01:00\",",
							"                  \"IterationLevel1\": \"flowerpot\",",
							"                  \"IterationLevel2\": \"Iteration 1\",",
							"                  \"Depth\": 1,",
							"                  \"IsEnded\": true",
							"                }",
							"              },",
							"              {",
							"                \"ChangedDate\": \"2019-02-20T14:22:00.37+01:00\",",
							"                \"WorkItemId\": 78567,",
							"                \"WorkItemRevisionSK\": 89722989,",
							"                \"WorkItemType\": \"Task\",",
							"                \"State\": \"New\",",
							"                \"StateCategory\": \"Proposed\",",
							"                \"Iteration\": {",
							"                  \"ProjectSK\": \"7c0a8e77-f740-44a3-96a7-7d7ff665caaf\",",
							"                  \"IterationSK\": \"857658df-406e-43e5-bb1b-382d229f2dea\",",
							"                  \"IterationId\": \"857658df-406e-43e5-bb1b-382d229f2dea\",",
							"                  \"IterationName\": \"Iteration 1\",",
							"                  \"Number\": 2565,",
							"                  \"IterationPath\": \"flowerpot\\\\Iteration 1\",",
							"                  \"StartDate\": \"2019-02-13T00:00:00+01:00\",",
							"                  \"EndDate\": \"2019-02-27T23:59:59.999+01:00\",",
							"                  \"IterationLevel1\": \"flowerpot\",",
							"                  \"IterationLevel2\": \"Iteration 1\",",
							"                  \"Depth\": 1,",
							"                  \"IsEnded\": true",
							"                }",
							"              }",
							"            ]",
							"        }",
							"    };",
							"    ",
							"sendRequest('rawdata', data);",
							"sendRequest('transformations', trans);",
							"sendRequest('configurations', conf);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{pat}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{front}}/api/data/csv/test",
					"host": [
						"{{front}}"
					],
					"path": [
						"api",
						"data",
						"csv",
						"test"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test add configurations",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "839444d7-7583-43b4-97ec-bef867bfbca6",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "34cc25c7-c4e5-49a1-b4d5-957cd07ab7c7",
						"exec": [
							"function createRequest(url, method, rev) {",
							"    var header;",
							"    if(rev) {",
							"        header = {",
							"                'Authorization': 'Basic ' + environment.userPass64,",
							"                'If-Match': rev",
							"            };",
							"            ",
							"    } else {header = 'Authorization: Basic  ' + environment.userPass64}",
							"   ",
							"    return {",
							"             url: environment.dburl + url,",
							"             method: method,",
							"             header: header",
							"    };",
							"}",
							"",
							"getRequest =  createRequest('configurations/test', 'GET');",
							"              ",
							"pm.test(\"Document put succesfully\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"if(pm.response.code == 200) {",
							"    pm.sendRequest(getRequest, function(err, res) {",
							"        pm.test(\"document found in db\", function() {",
							"            pm.expect(res).to.have.property('code', 200);",
							"        });",
							"        if(err) {",
							"            console.log(err);",
							"        } else if(res.code == 200) {",
							"                removeRequest =  getRequest =  createRequest('configurations/test', 'DELETE', res.json()._rev);",
							"                pm.sendRequest(removeRequest, function(err, res) {});",
							"        }",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{pat}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"_id\" : \"test\",\r\n    \"source\" : \"name of source such as Azure DevOps, Rally or Jira\",\r\n    \"dataset\" : \"name of the dataset. Eg a project name in azure devops\",\r\n    \"transformations\" : [\"transformation 1\", \"transformation 2\"]\r\n}"
				},
				"url": {
					"raw": "{{front}}/api/admin/configurations",
					"host": [
						"{{front}}"
					],
					"path": [
						"api",
						"admin",
						"configurations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test add transformation",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8e8d554f-db56-401d-a549-3b15bfb9450e",
						"exec": [
							"function createRequest(url, method, rev) {",
							"    var header;",
							"    if(rev) {",
							"        header = {",
							"                'Authorization': 'Basic ' + environment.userPass64,",
							"                'If-Match': rev",
							"            };",
							"            ",
							"    } else {header = 'Authorization: Basic  ' + environment.userPass64}",
							"   ",
							"    return {",
							"             url: environment.dburl + url,",
							"             method: method,",
							"             header: header",
							"    };",
							"}",
							"",
							"getRequest = createRequest('transformations/test1', 'GET');",
							"              ",
							"pm.test(\"Document put succesfully\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"if(pm.response.code == 200) {",
							"    pm.sendRequest(getRequest, function(err, res) {",
							"        pm.test(\"document found in db\", function() {",
							"            pm.expect(res).to.have.property('code', 200);",
							"        });",
							"        if(err) {",
							"            console.log(err);",
							"        } else if(res.code == 200) {",
							"            removeRequest = createRequest('transformations/test1', 'DELETE', res.json()._rev);",
							"            pm.sendRequest(removeRequest, function(err, res) {});",
							"        }",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{pat}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"_id\" : \"test1\",\n\t\"lines\" : [\"\",\"jghkhj\"]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{front}}/api/admin/transformations",
					"host": [
						"{{front}}"
					],
					"path": [
						"api",
						"admin",
						"transformations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test list configurations",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "850de264-28e7-4b7a-9488-4206565b3311",
						"exec": [
							"pm.test(\"Status code ok\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"List of confs returned\", function() {",
							"    pm.expect((pm.response.json().configurations)).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{pat}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{front}}/api/admin/list/admin/configurations",
					"host": [
						"{{front}}"
					],
					"path": [
						"api",
						"admin",
						"list",
						"configurations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test list transformations",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "48ae3fb8-66c0-430e-bdd3-d0dccc0a41c9",
						"exec": [
							"pm.test(\"Status code ok\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"List of transformachinos returned\", function() {",
							"    pm.expect((pm.response.json()).transformations).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "8fd83090-fb9b-48b6-a2d8-7ada45d9d1fe",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{pat}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{front}}/api/admin/list/transformations",
					"host": [
						"{{front}}"
					],
					"path": [
						"api",
						"admin",
						"list",
						"transformations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test list cache",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dc030ad5-bb28-4869-959e-e2fa456cdd21",
						"exec": [
							"pm.test(\"Status code ok\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"List of johnny cache returned\", function() {",
							"    pm.expect((pm.response.json()).cache).to.be.an('array')",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{pat}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{front}}/api/admin/list/cache",
					"host": [
						"{{front}}"
					],
					"path": [
						"api",
						"admin",
						"list",
						"cache"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test list rawdata",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dc030ad5-bb28-4869-959e-e2fa456cdd21",
						"exec": [
							"pm.test(\"Status code ok\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"List of rawdata returned\", function() {",
							"    pm.expect((pm.response.json()).rawdata).to.be.an('array')",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{pat}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{front}}/api/admin/list/rawdata",
					"host": [
						"{{front}}"
					],
					"path": [
						"api",
						"admin",
						"list",
						"rawdata"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test list log",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dc030ad5-bb28-4869-959e-e2fa456cdd21",
						"exec": [
							"pm.test(\"Status code ok\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"List of rawdata returned\", function() {",
							"    pm.expect((pm.response.json()).logEntries).to.be.an('array')",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{pat}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{front}}/api/admin/list/log",
					"host": [
						"{{front}}"
					],
					"path": [
						"api",
						"admin",
						"list",
						"log"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test status/sync",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3c93f0df-3bb8-4888-9f04-7abec5c9ffec",
						"exec": [
							"pm.test(\"status/sync responded with non-empty string\", function() {",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.text()).to.be.an('string');",
							"    pm.expect(pm.response.text().length).to.be.above(0);",
							"    console.log(pm.response.text())",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{pat}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{front}}/api/status/sync/test",
					"host": [
						"{{front}}"
					],
					"path": [
						"api",
						"status",
						"sync",
						"test"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}